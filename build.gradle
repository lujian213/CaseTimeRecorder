plugins {
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'org.springframework.boot' version "3.4.1"
}

group = 'io.github.lujian213'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.4.1')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.17.0'
    testImplementation platform('org.junit:junit-bom:5.8.2')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation platform('org.apache.groovy:groovy-bom:4.0.24')
    testImplementation 'org.apache.groovy:groovy'
    testImplementation platform("org.spockframework:spock-bom:2.4-M5-groovy-4.0")
    testImplementation "org.spockframework:spock-core"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-spring'
}

configurations.configureEach {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

clean {
    delete 'dist'
}

test {
    finalizedBy 'jacocoTestReport'
    useJUnitPlatform()
    maxParallelForks = 4
}
//sourceSets {
//    main {
//        resources {
//            srcDir 'client/build'
//        }
//    }
//}
jacocoTestReport {
    dependsOn test
    reports {
        csv.required = true
        html.required = true
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters'
}

tasks.register('install') {
    dependsOn 'build'
    group 'build'
    description 'prepare dist folder for deployment'
    doFirst {
        println '>>>mkdir dist'
        mkdir 'dist/lib'
        mkdir 'dist/bin'
        mkdir 'dist/repo'
//        println '>>>mkdir dist/export'
//        mkdir 'dist/export'
//        mkdir 'dist/export/static'
//        mkdir 'dist/nginx'
//        mkdir 'dist/client'
    }

    doLast {
//        println '>>>copy meta files'
//        copy {
//            from('.') {
//                include 'logo.png'
//                include 'app_meta.properties'
//            }
//            into './dist'
//        }

//        println '>>>copy bin and export'
//        copy {
//            from('.') {
//                include 'export/**'
//            }
//            into 'dist'
//        }
        println '>>>copy bin'
        copy {
            from 'scripts'
            into 'dist/bin'
        }
        println '>>>copy repo.zip'
        ant.zip(destfile: 'dist/repo/repo.zip', basedir: 'repo', includes: '*.json')
//
//        println '>>>copy nginx'
//        copy {
//            from('.') {
//                include 'config.nginx'
//            }
//            into './dist/nginx'
//        }
        println '>>>copy libs'
        copy {
            from('build/libs') {
                exclude 'CaseTime*plain.jar'
            }
            into 'dist/lib'
        }
        println '>>>copy repo'
        copy {
            from('repo') {
                include '*.json'
            }
            into 'dist/repo'
        }
    }
}
